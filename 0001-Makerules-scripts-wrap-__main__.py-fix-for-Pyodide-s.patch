From 1932a672db047da3204a445880007fcc522fa7d7 Mon Sep 17 00:00:00 2001
Message-ID: <1932a672db047da3204a445880007fcc522fa7d7.1708115863.git.mjg@fedoraproject.org>
From: Julian Smith <julian.smith@artifex.com>
Date: Wed, 13 Sep 2023 14:11:47 +0100
Subject: [PATCH 01/11] Makerules scripts/wrap/__main__.py: fix for Pyodide
 shared library builds.

We need to use environment's $CC (as set in Pyodide venv), not emcc.

Also, Pyodide builds are now indicated by $OS='pyodide'; previously we used
$OS='wasm' && $PYODIDE_ROOT!=''.

(cherry picked from commit 5b111feae295e52fd25bd7bcaabb5c5a3ea8687e)
---
 Makerules                | 28 ++++++++++++++++++++--------
 scripts/wrap/__main__.py | 26 ++++++++++++++++----------
 2 files changed, 36 insertions(+), 18 deletions(-)

diff --git a/Makerules b/Makerules
index f25a8ce0b..916e8581a 100644
--- a/Makerules
+++ b/Makerules
@@ -80,6 +80,14 @@ ifeq ($(shared),yes)
   else ifeq ($(OS),wasm-mt)
     LIB_LDFLAGS = -shared -sSIDE_MODULE
     EXE_LDFLAGS = -sMAIN_MODULE
+  else ifeq ($(OS),pyodide)
+    LIB_LDFLAGS = -shared -sSIDE_MODULE
+    EXE_LDFLAGS = -sMAIN_MODULE
+
+    # Pyodide's ld does not support -b so we cannot use it to create object
+    # files containing font data, so leave HAVE_OBJCOPY unset. And we need
+    # extra memory when linking.
+    LDFLAGS += -sTOTAL_MEMORY=48MB
   else
     LIB_LDFLAGS = -shared
   endif
@@ -181,14 +189,7 @@ else ifeq ($(OS),MACOS)
   endif
 
 else ifeq ($(OS),Linux)
-  ifeq ($(PYODIDE_ROOT),)
-    HAVE_OBJCOPY := yes
-  else
-    # Pyodide's ld does not support -b so we cannot use it to create object
-    # files containing font data, so leave HAVE_OBJCOPY unset. And we need
-    # extra memory when linking.
-    LDFLAGS += -sTOTAL_MEMORY=48MB
-  endif
+  HAVE_OBJCOPY := yes
 
   ifeq ($(shell pkg-config --exists freetype2 && echo yes),yes)
 	SYS_FREETYPE_CFLAGS := $(shell pkg-config --cflags freetype2)
@@ -297,6 +298,17 @@ ifeq "$(OS)" "wasm-mt"
   CFLAGS += -pthread
 endif
 
+ifeq "$(OS)" "pyodide"
+  build_prefix += $(OS)/
+  # We use the provided $CC and $CXX.
+  AR = emar
+  HAVE_GLUT=no
+  HAVE_X11=no
+  HAVE_OBJCOPY=no
+  HAVE_LIBCRYPTO=no
+  CFLAGS += -pthread
+endif
+
 ifeq "$(OS)" "mingw32-cross"
   build_prefix += $(OS)/
   SO := dll
diff --git a/scripts/wrap/__main__.py b/scripts/wrap/__main__.py
index a543a689c..9ae753a72 100644
--- a/scripts/wrap/__main__.py
+++ b/scripts/wrap/__main__.py
@@ -1207,12 +1207,12 @@ def _get_m_command( build_dirs, j=None):
     build_prefix = ''
     in_prefix = True
     for i, flag in enumerate( flags):
-        if flag in ('x32', 'x64') or flag.startswith('py'):
+        if flag in ('x32', 'x64') or re.match('py[0-9]', flag):
             # setup.py puts cpu and python version
             # elements into the build directory name
             # when creating wheels; we need to ignore
             # them.
-            pass
+            jlib.log('Ignoring {flag=}')
         else:
             if 0: pass  # lgtm [py/unreachable-statement]
             elif flag == 'debug':
@@ -1438,8 +1438,8 @@ def build_0(
 
 def link_l_flags(sos):
     ld_origin = None
-    if os.environ.get('OS') in ('wasm', 'wasm-mt'):
-        # Don't add '-Wl,-rpath*' etc if building for wasm.
+    if os.environ.get('OS') == 'pyodide':
+        # Don't add '-Wl,-rpath*' etc if building for Pyodide.
         ld_origin = False
     return jlib.link_l_flags( sos, ld_origin)
 
@@ -1472,8 +1472,13 @@ def build( build_dirs, swig_command, args, vs_upgrade):
     header_git = False
     j = 0
     refcheck_if = '#ifndef NDEBUG'
-    wasm = os.environ.get('OS') in ('wasm', 'wasm-mt')
-    if wasm:
+    pyodide = (os.environ.get('OS') == 'pyodide')
+    if pyodide:
+        # Looks like Pyodide sets CXX to (for example) /tmp/tmp8h1meqsj/c++.
+        # But for some reason using `compiler = os.environ['CXX']` fails when we
+        # build libmupdfcpp.so, with:
+        #   emsdk/upstream/bin/llvm-nm: error: a.out: No such file or directory
+        # But using `em++` directly seems to work.
         compiler = 'em++'
     elif state.state_.macos:
         compiler = 'c++ -std=c++14'
@@ -1626,7 +1631,7 @@ def build( build_dirs, swig_command, args, vs_upgrade):
                                 f'''
                                 {compiler}
                                     -o {os.path.relpath(libmupdfcpp)}
-                                    {"-sSIDE_MODULE" if wasm else ""}
+                                    {"-sSIDE_MODULE" if pyodide else ""}
                                     {build_dirs.cpp_flags}
                                     -fPIC -shared
                                     -I {include1}
@@ -1884,10 +1889,11 @@ def build( build_dirs, swig_command, args, vs_upgrade):
                         # todo: maybe instead use sysconfig.get_config_vars() ?
                         #
 
-                        if os.environ.get('PYODIDE_ROOT'):
+                        if os.environ.get('OS') == 'pyodide':
+                            assert os.environ.get('PYODIDE_ROOT') is not None
                             _include_dir = os.environ[ 'PYO3_CROSS_INCLUDE_DIR']
                             _lib_dir = os.environ[ 'PYO3_CROSS_LIB_DIR']
-                            jlib.log( 'PYODIDE_ROOT set. {_include_dir=} {_lib_dir=}')
+                            jlib.log( 'OS is Pyodide. {_include_dir=} {_lib_dir=}')
                             flags_compile = f'-I {_include_dir}'
                             flags_link = f'-L {_lib_dir}'
 
@@ -2007,7 +2013,7 @@ def build( build_dirs, swig_command, args, vs_upgrade):
                             f'''
                             {compiler}
                                 -o {os.path.relpath(out_so)}
-                                {"-sMAIN_MODULE" if wasm else ""}
+                                {"-sMAIN_MODULE" if pyodide else ""}
                                 {cpp_path}
                                 {build_dirs.cpp_flags}
                                 -fPIC
-- 
2.44.0.rc1.222.g52f20dec8d

